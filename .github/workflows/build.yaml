name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'vite.config.ts'
      - 'tsconfig.json'
      - 'tsconfig.node.json'
      - 'package.json'
      - '!.github/**'
      - '!.husky/**'
      - '!.vscode/**'
      - '!**/README.md'
      - '!**/CHANGELOG.md'
      - '!**/LICENSE'

# Automatically cancel in-progress actions on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Setup PNPM
        id: pnpm-install
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 7
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build Packages
        env:
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_UPLOADS_URL: ${{ secrets.VITE_UPLOADS_URL }}
          VITE_USER_KEY: ${{ secrets.VITE_USER_KEY }}
        run: pnpm run build

      - name: Copy to Nest
        #uses: ./.github/ # Uses an action in the root directory
        env:
          API_TOKEN_GITHUB: ${{ secrets.PERSONAL_TOKEN }}
          SOURCE_FILES: 'dist/**'
          DESTINATION_USERNAME: alextim
          DESTINATION_REPOSITORY: nest-test-app
          DESTINATION_BRANCH: main
          DESTINATION_DIRECTORY: /public
          COMMIT_USERNAME: ""
          COMMIT_EMAIL: 'buildmnt@gmail.com'
          COMMIT_MESSAGE: Update from ORIGIN_COMMIT
        #with:
        #  source-files: 'dist/**'
        #  destination-username: alextim
        #  destination-repository: nest-test-app
        #  destination-directory : /public
        #  commit-email: 'buildmnt@gmail.com'
        run: |
          set -e  # if a command fails exit the script
          set -u  # script fails if trying to access an undefined variable

          echo
          echo "##### Starting #####"


          if [ -z "$COMMIT_USERNAME" ]
          then
            COMMIT_USERNAME="$DESTINATION_USERNAME"
          fi

          CLONE_DIRECTORY=$(mktemp -d)

          echo
          echo "##### Cloning source git repository #####"
          # Setup git
          git config --global user.email "$COMMIT_EMAIL"
          git config --global user.name "$DESTINATION_USERNAME"

          # Remove git directory if it exists to prevent errors
          # rm -rf .git

          # git clone "https://github.com/$GITHUB_REPOSITORY.git" repo

          # cd repo
          # ls -la

          echo
          echo "##### Cloning destination git repository #####"

          git clone --single-branch --branch "$DESTINATION_BRANCH" "https://$API_TOKEN_GITHUB@github.com/$DESTINATION_USERNAME/$DESTINATION_REPOSITORY.git" "$CLONE_DIRECTORY"
          ls -la "$CLONE_DIRECTORY"

          echo
          echo "##### Removing $CLONE_DIRECTORY/$DESTINATION_DIRECTORY #####"
          rm -rf "$CLONE_DIRECTORY/$DESTINATION_DIRECTORY"

          echo
          echo "##### Copying contents to git repo #####"
          mkdir -p "$CLONE_DIRECTORY/$DESTINATION_DIRECTORY"
          cp -rvf $SOURCE_FILES "$CLONE_DIRECTORY/$DESTINATION_DIRECTORY"
          cd "$CLONE_DIRECTORY"

          echo
          echo "##### Adding git commit #####"

          ORIGIN_COMMIT="https://github.com/$GITHUB_REPOSITORY/commit/$GITHUB_SHA"
          COMMIT_MESSAGE="${COMMIT_MESSAGE/ORIGIN_COMMIT/$ORIGIN_COMMIT}"

          git add .
          git status

          # don't commit if no changes were made
          git diff-index --quiet HEAD || git commit --message "$COMMIT_MESSAGE"

          echo
          echo "##### Pushing git commit #####"
          # --set-upstream: sets the branch when pushing to a branch that does not exist
          git push origin --set-upstream "$DESTINATION_BRANCH"


